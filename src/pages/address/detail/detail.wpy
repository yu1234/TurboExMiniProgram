<style lang="less">
  .header {
    padding-top: .75rem;
    .avatar {
      display: block;
      width: 3.5rem;
      height: 3.5rem;
    }
    .text {
      font-size: 1.2rem;
    }
  }

  .tool {
    padding-top: 1.5rem;
    .avatar {
      display: inline-block;
      width: 3rem;
      height: 3rem;
      color: rgb(33, 33, 33);
      background-color: rgb(245, 245, 245);
      border-radius: 50%;
      .icon {
        font-size: 1.4rem;
      }
    }
    .text {
      margin-top: .3rem;
      font-size: .75rem;
    }
  }

  .list {
    padding-top: .75rem;
    padding-left: .5rem;
    padding-right: .5rem;
    .title {
      font-size: .95rem;
      color: rgb(153, 153, 153);
      padding-right: 1rem;
      min-width: 5rem;
      min-height: 2rem;
    }
    .text {
      max-width: 13rem;
      height: 2rem;
      font-size: .95rem;
      color: rgb(73, 169, 242);
    }
    .text1 {
      max-width: 14.5rem;
      min-height: 2rem;
      font-size: .95rem;
    }
  }

  .toolPopup {
    max-height: 25rem;
    max-width: 15rem;
    min-width: 12rem;
    padding: .5rem;
    .item {
      padding: .3rem;
      color: rgb(73, 169, 242);
    }
  }

  .listPopup {
    max-height: 25rem;
    max-width: 15rem;
    min-width: 12rem;
    padding: .5rem;
    .item {
      padding: .3rem;
      .icon {
        font-size: 1.2rem;
        margin-right: .5rem;
      }
    }
  }

</style>
<template>
  <view class="header">
    <wxc-flex dir="top" cross="center">
      <view>
        <wxc-avatar class="avatar" src="{{detailInfo.headerPhoto}}"></wxc-avatar>
      </view>
      <view class="text">
        <text>{{detailInfo.name}}</text>
      </view>
    </wxc-flex>
  </view>
  <view class="tool">
    <wxc-flex main="center">
      <view class="tb-flex-item text-center" @tap="toolItemTap('ml')">
        <wxc-avatar class="avatar">
          <icon class="iconfont icon-linkman_icon_mail_de icon"></icon>
        </wxc-avatar>
        <view class="text-center text">
          <text>发邮件</text>
        </view>
      </view>
      <view class="tb-flex-item text-center" @tap="toolItemTap('tel')">
        <wxc-avatar class="avatar">
          <icon class="iconfont icon-linkman_icon_call_de icon"></icon>
        </wxc-avatar>
        <view class="text-center text">
          <text>打电话</text>
        </view>
      </view>
    </wxc-flex>
  </view>
  <view class="list">
    <wxc-flex>
      <view class="title">
        <text>邮件地址</text>
      </view>
      <view>
        <wxc-flex dir="top">
          <block wx:for="{{detailInfo.emails}}" wx:key="{{item.mail}}">
            <view class="text content-nowrap" @tap="listItemTap('ml',{{item.mail}})">
              <text>{{item.mail}}</text>
            </view>
          </block>
        </wxc-flex>
      </view>
    </wxc-flex>
    <wxc-flex>
      <view class="title">
        <text>联系电话</text>
      </view>
      <view>
        <wxc-flex dir="top">
          <block wx:for="{{detailInfo.phones}}" wx:key="{{item.phone}}">
            <view class="text content-nowrap" @tap="listItemTap('tel',{{item.phone}})">
              <text>{{item.phone}}</text>
            </view>
          </block>
        </wxc-flex>
      </view>
    </wxc-flex>
    <wxc-flex>
      <view class="title">
        <text>地址</text>
      </view>
      <view class="text1">
        <text>{{detailInfo.address}}</text>
      </view>
    </wxc-flex>
    <wxc-flex>
      <view class="title">
        <text>单位</text>
      </view>
      <view class="text1">
        <text>{{detailInfo.organization}}</text>
      </view>
    </wxc-flex>
    <wxc-flex>
      <view class="title">
        <text>部门</text>
      </view>
      <view class="text1">
        <text>{{detailInfo.department}}</text>
      </view>
    </wxc-flex>
    <wxc-flex>
      <view class="title">
        <text>职位</text>
      </view>
      <view class="text1">
        <text>{{detailInfo.employment}}</text>
      </view>
    </wxc-flex>
    <wxc-flex>
      <view class="title">
        <text>备注</text>
      </view>
      <view class="text1">
        <text>{{detailInfo.remark}}</text>
      </view>
    </wxc-flex>
  </view>
  <tb-popup open="{{popup.toolPopupOpen}}" name="toolPopupOpen" bind:show="popupChange"
            bind:hide="popupChange">
    <view class="toolPopup">
      <block wx:for="{{popup.toolPopupData.data}}" wx:key="{{item}}">
        <view class="item" @tap="toolPopupItemTap({{popup.toolPopupData.type}},{{item}})">{{item}}</view>
      </block>
    </view>
  </tb-popup>
  <tb-popup open="{{popup.listPopupOpen}}" name="listPopupOpen" bind:show="popupChange"
            bind:hide="popupChange">
    <view class="listPopup">
      <view class="item" @tap="listPopupItemTap('ml',{{popup.listPopupData.data}})"
            wx:if="{{popup.listPopupData.type==='ml'}}">
        <icon class="iconfont icon-linkman_icon_mail_de icon"></icon>
        <text>发邮件</text>
      </view>
      <view class="item" @tap="listPopupItemTap('tel',{{popup.listPopupData.data}})"
            wx:if="{{popup.listPopupData.type==='tel'}}">
        <icon class="iconfont icon-linkman_icon_call_de icon"></icon>
        <text>打电话</text>
      </view>
      <view class="item" @tap="listPopupItemTap('copy',{{popup.listPopupData.data}})">
        <icon class="iconfont icon-contact_menu_icon_co icon"></icon>
        <text>粘贴</text>
      </view>
    </view>
  </tb-popup>
</template>

<script>
  import wepy from 'wepy'
  import BaseMixin from '../../../mixins/base'
  import PopupMixin from '../../../mixins/popup'
  import {twCallBeanPromise} from '../../../utils/twmodule'
  import {defaultErrors} from '../../../utils/utils'

  export default class AddressDetail extends wepy.page {
    mixins = [BaseMixin, PopupMixin]
    config = {
      navigationBarTitleText: '',
      usingComponents: {
        'wxc-flex': '../../../components/minui/wxc-flex/index',
        'wxc-avatar': '../../../components/minui/wxc-avatar/index',
        'tb-popup': '../../../components/tbui/tb-popup/index'
      },
      enablePullDownRefresh: true,
      backgroundTextStyle: `dark`
    }
    components = {}
    data = {
      detailInfo: {},
      popup: {
        toolPopupData: {
          type: null,
          data: null
        },
        toolPopupOpen: false,
        listPopupOpen: false,
        listPopupData: {
          type: null,
          data: null
        }
      }
    }
    computed = {}
    methods = {
      toolItemTap(type) {
        if (type === 'ml') {
          if (this.isArrayNotNull(this.detailInfo.emails)) {
            this.popup.toolPopupData.type = type
            this.popup.toolPopupData.data = []
            this.each(this.detailInfo.emails, (ml, i) => {
              if (ml.mail) {
                this.popup.toolPopupData.data.push(ml.mail)
              }
            })
            this.$apply()
            this.openPopup('toolPopupOpen')
          } else {
            wepy.showToast({title: '邮件地址为空,不能发送邮件!!!', icon: 'none'})
          }
        } else if (type === 'tel') {
          if (this.isArrayNotNull(this.detailInfo.phones)) {
            this.popup.toolPopupData.type = type
            this.popup.toolPopupData.data = []
            this.each(this.detailInfo.phones, (phone, i) => {
              if (phone.phone) {
                this.popup.toolPopupData.data.push(phone.phone)
              }
            })
            this.$apply()
            this.openPopup('toolPopupOpen')
          } else {
            wepy.showToast({title: '电话号码为空,不能打电话!!!', icon: 'none'})
          }
        }
      },
      toolPopupItemTap(type, data) {
        if (type === 'ml') {
          let params = {
            address: data,
            name: this.detailInfo.name
          }
          this.loadPage(`/pages/mail/write/write?type=sendMail&data=${JSON.stringify(params)}`)
        } else if (type === 'tel') {
          if (data) {
            wx.makePhoneCall({phoneNumber: data})
          }
        }
      },
      listItemTap(type, data) {
        if (type && data) {
          this.popup.listPopupData.type = type
          this.popup.listPopupData.data = data
          this.$apply()
          this.openPopup('listPopupOpen')
        }
      },
      listPopupItemTap(type, data) {
        let _this = this
        if (type === 'ml') {
          let params = {
            address: data,
            name: this.detailInfo.name
          }
          this.loadPage(`/pages/mail/write/write?type=sendMail&data=${JSON.stringify(params)}`)
        } else if (type === 'tel') {
          if (data) {
            wx.makePhoneCall({phoneNumber: data})
          }
        } else if (type === 'copy') {
          if (data) {
            wx.setClipboardData({
              data: data,
              success() {
                _this.closePopup('listPopupOpen')
                wepy.showToast({title: '粘贴成功'})
              },
              fail() {
                wepy.showToast({title: '粘贴失败'})
              }
            })
          }
        }
      }
    }

    onShow() {
    }

    onLoad(options) {
      let self = this
      if (options && options.id && options.type) {
        wepy.showLoading({title: '加载中...'})
        self.getAddressDetail(options.type, options.id).then((data) => {
          this.detailInfo = data
          this.$apply()
          wepy.hideLoading()
        }).catch((e) => {
          wepy.hideLoading()
          wepy.showToast({
            title: e.message,
            icon: 'none',
            complete() {
              setTimeout(() => {
                self.backPage()
              }, 1000)
            }
          })
        })
      } else {
        wepy.showToast({
          title: '获取数据失败,请重试',
          icon: 'none',
          complete() {
            setTimeout(() => {
              self.backPage()
            }, 1000)
          }
        })
      }
    }

    /**
     * 获取地址详情
     * @param type
     * @param id
     * @return {Promise<any>}
     */
    getAddressDetail(type, id) {
      return new Promise((resolve, reject) => {
        if (type && id) {
          if (type === 'sys' || type === 'personal' || type === 'common') {
            twCallBeanPromise('address.' + type + '.item.get', {aiid: id}).then((ret) => {
              if (ret.beanparam.data.id) {
                this.addressDetailFormat(id, ret.beanparam.data, type).then((data) => {
                  resolve(data)
                })
              } else {
                reject(defaultErrors.customError('系统暂无此地址详细数据'))
              }
            }).catch(function (e) {
              reject(defaultErrors.customError('系统暂无此地址详细数据'))
            })
          } else if (type === 'org') {
            this.getSysAccountInfo(id).then((res) => {
              this.addressDetailFormat(id, res, type).then((data) => {
                resolve(data)
              })
            }).catch(function (e) {
              reject(defaultErrors.customError('系统暂无此地址详细数据'))
            })
          } else if (type === 'workgroup') {
            if (id.indexOf('@') === -1) {
              this.getSysAccountInfo(id).then((res) => {
                this.addressDetailFormat(id, res, type).then((data) => {
                  resolve(data)
                })
              }).catch(function (e) {
                reject(defaultErrors.customError('系统暂无此地址详细数据'))
              })
            } else {
              let dist = {
                id: id,
                headerPhoto: this.defaultHeaderPhoto,
                name: id,
                emails: [{mail: id, type: 0}],
                phones: [],
                address: '',
                organization: '',
                department: '',
                employment: '',
                remark: ''
              }
              resolve(dist)
            }
          } else {
            reject(defaultErrors.customError('系统暂无此地址详细数据'))
          }
        } else {
          reject(defaultErrors.customError('系统暂无此地址详细数据'))
        }
      })
    }

    /**
     * 地址详情格式化
     */
    addressDetailFormat(id, src, type) {
      return new Promise(resolve => {
        if (src) {
          let dist = {
            id: id,
            headerPhoto: this.defaultHeaderPhoto,
            name: '',
            emails: [],
            phones: [],
            address: '',
            organization: '',
            department: '',
            employment: '',
            remark: ''
          }
          if (type === 'sys' || type === 'personal' || type === 'common') {
            dist.name = src.name
            let address = null
            if (this.isArrayNotNull(src.emails)) {
              this.each(src.emails, (ml, i) => {
                if (ml.account) {
                  let temp = {
                    mail: ml.account,
                    type: ml.emailtype || 0
                  }
                  dist.emails.push(temp)
                  if (!address) {
                    address = ml.account
                  }
                }
              })
            }
            if (this.isArrayNotNull(src.tels)) {
              this.each(src.tels, (tel, i) => {
                if (tel.tel) {
                  let temp = {
                    phone: tel.tel,
                    type: tel.teltype || 0
                  }
                  dist.phones.push(temp)
                }
              })
            }
            if (src.attrs) {
              let attrs = src.attrs
              dist.address = `${attrs.country || ''}${attrs.state_province || ''}${attrs.city || ''}${attrs.address || ''}(${attrs.postalcode || 0})`
              dist.organization = attrs.organization || ''
              dist.department = attrs.department
              dist.employment = attrs.employment
              dist.remark = attrs.remark
            }
            if (address) {
              this.getSysUserInfo([address]).then((map) => {
                if (map[address] && map[address].headerPhoto) {
                  dist.headerPhoto = map[address].headerPhoto
                }
              })
            }
            resolve(dist)
          } else if (type === 'org' || type === 'workgroup') {
            dist.name = src.name
            if (this.isArrayNotNull(src.accounts)) {
              this.each(src.accounts, (ml, i) => {
                if (ml.domain && ml.username) {
                  let temp = {
                    mail: `${ml.username}@${ml.domain}`,
                    type: ml.accounttype || 0
                  }
                  dist.emails.push(temp)
                }
              })
            }
            if (this.isArrayNotNull(src.obj.tels)) {
              this.each(src.obj.tels, (tel, i) => {
                if (tel.tel) {
                  let temp = {
                    phone: tel.tel,
                    type: tel.teltype || 0
                  }
                  dist.phones.push(temp)
                }
              })
            }
            if (src.obj.attrs) {
              let attrs = src.obj.attrs
              dist.address = `${attrs.country || ''}${attrs.state_province || ''}${attrs.city || ''}${attrs.address || ''}(${attrs.postalcode || 0})`
              dist.organization = attrs.organization || ''
              dist.department = attrs.department
              dist.employment = attrs.position
              dist.remark = attrs.remark || ''
            }
            if (src.headerPhoto) {
              dist.headerPhoto = src.headerPhoto
            }
            resolve(dist)
          } else {
            resolve({})
          }
        } else {
          resolve({})
        }
      })
    }

    /**
     * 获取系统用户详情
     * @param id
     * @return {Promise<any>}
     */
    getSysAccountInfo(id) {
      return new Promise((resolve, reject) => {
        this.getSysUserInfoById([id]).then((obj) => {
          if (obj && obj[id]) {
            var r = obj[id]
            // 获取部门和职位
            twCallBeanPromise('config.post.getlist', {}).then((ret) => {
              if (ret.beanparam.data.posts && ret.beanparam.data.posts.length > 0) {
                var list = ret.beanparam.data.posts
                var postMap = {}
                for (var i = 0; i < list.length; i++) {
                  postMap[list[i].poid] = list[i].name
                }
                twCallBeanPromise('du.org.getudr', {'ids': [id]}).then((ret1) => {
                  if (ret1.beanparam.data.U_D) {
                    var orgs = ret1.beanparam.data.U_D[id]
                    if (orgs) {
                      this.each(orgs, function (key, org) {
                        if (org.poid && postMap[org.poid]) {
                          orgs[key].postName = postMap[org.poid]
                        }
                      })
                      r.orgs = orgs
                    }
                  }
                  resolve(r)
                }).catch(function () {
                  resolve(r)
                })
              } else {
                resolve(r)
              }
            }).catch(function (e) {
              reject(defaultErrors.serverError)
            })
          } else {
            reject(defaultErrors.serverError)
          }
        }).catch(function (e) {
          reject(defaultErrors.serverError)
        })
      })
    }
  }
</script>
