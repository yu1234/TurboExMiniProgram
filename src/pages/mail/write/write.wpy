<style lang="less">
  .from-item {
    padding: .5rem;
    border-bottom: 1px silver solid;
  }

  .attachPopup {
    height: 4.75rem;

    .tb-avatar {
      display: inline-flex;
      width: 3rem;
      height: 3rem;
      border-radius: 50%;
      background: rgb(245, 245, 245);;
      color: black;
    }
    .attach-item {
      flex: 1 1 auto;
    }
    .attaches {
      .item {
        margin-top: .5rem;
        background-color: rgb(238, 238, 238);
      }
    }
  }

  .attaches {
    .item {
      margin-top: .5rem;
      background-color: rgb(238, 238, 238);
    }
  }
</style>
<template>
  <tb-nav has-right>
    <view slot="right">
      <icon class="iconfont icon-nav_btn_send tb-nav-icon" @tap="sendMail"
            style="color: {{canSend ?'#49A9F2;':'#ccc;'}}"></icon>
    </view>
  </tb-nav>
  <view class="tb-content has-sub-header">
    <view class="from-item">
      <tb-input-tag sys-font-size="{{sysFontSize}}" title="{{inputTitle.title}}" name="tos" exist-tags="{{existTags}}"
                    bind:tagChange="tagChange" bind:onInput="inputTagChange" id="tos"
                    auto-compete-list="{{autoCompeteList}}" bind:rightIconTap="selectAddress"></tb-input-tag>
    </view>
    <view class="from-item" wx:if="{{!showOtherInput}}" @tap="onShowOtherInput" style="min-height: 1.5rem">
      <text style="color: #49a9f2">抄送/密送</text>
    </view>
    <view class="from-item" wx:if="{{showOtherInput}}">
      <tb-input-tag sys-font-size="{{sysFontSize}}" title="{{inputTitle.title1}}" name="ccs" id="ccs"
                    bind:tagChange="tagChange" exist-tags="{{existTags}}" bind:onInput="inputTagChange"
                    auto-compete-list="{{autoCompeteList}}" bind:rightIconTap="selectAddress"></tb-input-tag>
    </view>
    <view class="from-item" wx:if="{{showOtherInput}}">
      <tb-input-tag sys-font-size="{{sysFontSize}}" title="{{inputTitle.title2}}" name="bccs" id="bccs"
                    bind:tagChange="tagChange" exist-tags="{{existTags}}" bind:onInput="inputTagChange"
                    auto-compete-list="{{autoCompeteList}}" bind:rightIconTap="selectAddress"></tb-input-tag>
    </view>
    <view class="from-item">
      <tb-input title="{{inputTitle.title3}}" model="{{mail.subject}}" name="mail.subject" bind:input="formChange"
                has-right>
        <view slot="right">
          <icon class="iconfont icon-compose_mail_btn_add" style="color: rgb(255, 195, 0);font-size: 1rem"
                @tap.stop="chooseUploadAttach"></icon>
        </view>
      </tb-input>
    </view>
    <view class="from-item">
      <textarea style="width: 100%;" maxlength="{{-1}}" bindinput="mailContentChange"></textarea>
    </view>
    <view class="from-item" wx:if="{{forwardMailContent}}">
      <tb-rich-text nodes="{{forwardMailContent}}"></tb-rich-text>
    </view>
    <view style="padding: 0 .5rem .2rem .5rem" class="attaches" wx:if="{{mail.attachs&&mail.attachs.length}}">
      <block wx:for="{{mail.attachs}}" wx:key="{{item.id}}">
        <tb-list-item item-class="item" title="{{item.filename}}" text="{{item.size>0?item.formatSize:''}}" has-left
                      has-right @tap.stop="attachItemTap('item',{{item}})">
          <view style="height: 2.5rem" slot="left">
            <wxc-avatar class="tb-head-avatar" mold="square" src="{{item.icon}}">
            </wxc-avatar>
          </view>
          <view slot="right" style="padding-right: .5rem">
            <icon class="iconfont icon-nav_btn_cancel" style="font-size: 1.2rem"
                  @tap.stop="removeAttach({{index}},{{item.id}})"></icon>
          </view>
        </tb-list-item>
      </block>
    </view>
  </view>
  <!--上传附件弹出层-->
  <tb-popup open="{{popup.attachPopupOpen}}" position="bottom" name="attachPopupOpen" bind:show="popupChange"
            bind:hide="popupChange">
    <view class="attachPopup">
      <wxc-flex main="center" cross="center">
        <view class="attach-item text-center" @tap="chooseImage">
          <wxc-avatar class="tb-avatar">
            <icon class="iconfont icon-add_attachment_icon_4" style="font-size: 1.8rem"></icon>
          </wxc-avatar>
          <view>
            <text>选择图片</text>
          </view>
        </view>
        <view class="attach-item text-center" @tap="chooseVideo">
          <wxc-avatar class="tb-avatar">
            <icon class="iconfont icon-aui-icon-video" style="font-size: 1.8rem"></icon>
          </wxc-avatar>
          <view>
            <text>选择视频</text>
          </view>
        </view>
        <view class=" attach-item  text-center" @tap="chooseFileByNetDisk">
          <wxc-avatar class="tb-avatar">
            <icon class="iconfont icon-function_icon_online" style="font-size: 1.8rem"></icon>
          </wxc-avatar>
          <view>
            <text>选择网盘</text>
          </view>
        </view>
      </wxc-flex>
    </view>
  </tb-popup>
</template>

<script>
  import wepy from 'wepy'
  import BaseMixin from '../../../mixins/base'
  import PopupMixin from '../../../mixins/popup'
  import FromMixin from '../../../mixins/form'
  import CommonMixin from '../../../mixins/common'
  import UploadFileMixin from '../../../mixins/uploadFile'
  import {sendMail, twCallBeanPromise} from '../../../utils/twmodule'
  import {bytesToSize, getPhotoByFileType} from '../../../utils/utils'
  import {getWid} from '../../../config'
  import onfire from '../../../utils/onfire.min'

  export default class Write extends wepy.page {
    mixins = [BaseMixin, PopupMixin, FromMixin, UploadFileMixin, CommonMixin]
    config = {
      navigationBarTitleText: '写邮件',
      usingComponents: {
        'tb-nav': '../../../components/tbui/tb-nav/index',
        'tb-list-item': '../../../components/tbui/tb-list-item/index',
        'tb-input-tag': '../../../components/tbui/tb-input-tag/index',
        'tb-input': '../../../components/tbui/tb-input/index',
        'wxc-flex': '../../../components/minui/wxc-flex/index',
        'wxc-avatar': '../../../components/minui/wxc-avatar/index',
        'tb-popup': '../../../components/tbui/tb-popup/index',
        'tb-rich-text': '../../../components/tbui/tb-rich-text/index'
      }
    }
    components = {}
    data = {
      canSend: false,
      autoCompeteList: [],
      existTags: [],
      inputTitle: {
        title: '收件人:',
        title1: '抄&emsp;送:',
        title2: '密&emsp;送:',
        title3: '主&emsp;题'
      },
      showOtherInput: false,
      popup: {
        attachPopupOpen: false
      },
      mail: {
        foldercode: 'send', // 保存在已发送
        from: null,
        tos: [],
        ccs: [],
        bccs: [],
        sendtime: null,
        neednotification: false,
        sendsingle: false,
        stationery: null,
        priority: null,
        importance: null,
        sec_class: null,
        subject: null,
        date: null,
        contents: [{
          'content-type': 'text/html',
          content: ''
        }],
        attachs: []
      },
      attachesMap: {},
      forwardMailContent: null
    }
    computed = {}
    watch = {
      mail(newVal) {
        if (newVal) {
          if (this.isArrayNotNull(newVal.tos)) {
            this.canSend = true
            this.$apply()
          } else {
            this.canSend = false
          }
        } else {
          this.canSend = false
        }
      }
    }
    methods = {
      onShowOtherInput() {
        this.showOtherInput = true
      },
      chooseUploadAttach() {
        this.openPopup('attachPopupOpen')
      },
      chooseImage() {
        let self = this
        wepy.chooseImage({
          success(res) {
            if (res && self.isArrayNotNull(res.tempFilePaths)) {
              self.commonUploadFile(res.tempFilePaths).then((ures) => {
                console.log('upload.success', ures)
                self.each(ures, (file, i) => {
                  if (res.tempFiles && res.tempFiles.length > file.index) {
                    ures[i].size = (res.tempFiles[file.index].size || 0)
                  } else {
                    ures[i].size = 0
                  }
                  ures[i].icon = getPhotoByFileType('jpg')
                })
                self.addAttaches(ures, 'upload')
              }).catch((e) => {
                console.log('upload.fail', e)
              })
            } else {
              wepy.showToast({title: `请选择图片`, icon: 'none'})
            }
          },
          fail(res) {
            wepy.showToast({title: `图片选择失败,请重新选择`, icon: 'none'})
          }
        })
      },
      chooseVideo() {
        let self = this
        wepy.chooseVideo({
          success(res) {
            console.log('chooseVideo:', res)
            if (res && res.tempFilePath) {
              self.commonUploadFile([res.tempFilePath]).then((ures) => {
                console.log('upload.success', ures)
                self.each(ures, (file, i) => {
                  if (res.tempFiles && res.tempFiles.length > file.index) {
                    ures[i].size = (res.tempFilePath.size || 0)
                  } else {
                    ures[i].size = 0
                  }
                  ures[i].icon = getPhotoByFileType('mp4')
                })
                self.addAttaches(ures, 'upload')
              }).catch((e) => {
                console.log('upload.fail', e)
              })
            } else {
              wepy.showToast({title: `请选择视频`, icon: 'none'})
            }
          },
          fail(res) {
            wepy.showToast({title: `视频选择失败,请重新选择`, icon: 'none'})
          }
        })
      },
      chooseFileByNetDisk() {
        this.loadPage(`/pages/netdisk/selector/selector?selector=uploadFile&page=write`)
      },
      tagChange(e) {
        let name = e.detail.name
        let tags = e.detail.tags
        let addresses = []
        if (this.isArrayNotNull(tags)) {
          this.each(tags, (v, i) => {
            if (v && v.id) {
              addresses.push(v.id)
            }
          })
        }
        if (name === 'tos') {
          this.mail.tos = addresses
        } else if (name === 'ccs') {
          this.mail.ccs = addresses
        } else if (name === 'bccs') {
          this.mail.bccs = addresses
        }
        this.existTags = this.concat([], this.mail.tos, this.mail.ccs, this.mail.bccs)
      },
      mailContentChange(e) {
        let v = e.detail.value
        v = v.replace(/\n/g, '<br/>')
        this.mail.contents[0].content = `<div>${v}</div>`
      },
      sendMail() {
        let self = this
        if (!this.canSend) {
          wepy.showToast({
            title: '请填写收件人再发送',
            icon: 'none'
          })
          return
        }
        if (this.forwardMailContent) {
          this.mail.contents[0].content = this.mail.contents[0].content + this.forwardMailContent
        }
        wepy.showLoading({
          title: '邮件发送中...'
        })
        let userInfo = this.$parent.globalData.userInfo
        let params = {sendAndSave: true, maxRcpts: userInfo.maxRcpts, sendMailMaxSize: userInfo.sendMailMaxSize}
        if (userInfo.address) {
          this.mail.from = userInfo.address
        }
        sendMail(this.mail, params).then((result) => {
          wepy.hideLoading()
          wepy.showToast({
            title: '邮件发送成功',
            complete() {
              setTimeout(() => {
                self.backPage()
              }, 1000)
            }
          })
        }).catch((e) => {
          wepy.hideLoading()
          wepy.showToast({
            title: e.message,
            icon: 'none'
          })
        })
      },
      inputTagChange(e) {
        let value = e.detail.value
        this.autoCompeteItem(value)
      },
      selectAddress(e) {
        let name = e.detail.name
        if (name) {
          this.loadPage(`/pages/address/selector/selector?selector=${name}&&page=write`)
        }
      },
      removeAttach(index, id) {
        if (this.mail.attachs && this.mail.attachs.length > index) {
          if (this.mail.attachs[index].id === id) {
            this.attachesMap[id] = false
            this.mail.attachs.splice(index, 1)
          }
        }
      }
    }

    onShow() {
      console.log('write.onSHow')
    }

    onLoad(options) {
      this.subscription()
      if (options) {
        try {
          if (options.data) {
            let data = JSON.parse(options.data)
            this.forward(options.type, data)
          }
        } catch (e) {

        }
      }
    }

    onUnload(e) {
      onfire.un('netDiskSelector')
      onfire.un('addressSelector')
    }

    subscription() {
      let netDiskSelector = onfire.on('netDiskSelector', (option) => {
        if (option && option.selector === 'uploadFile' && option.page === 'write' && option.action === 'ok' && this.isArrayNotNull(option.data)) {
          this.addAttaches(option.data, 'netDisk')
        }
      })
      let addressSelector = onfire.on('addressSelector', (option) => {
        if (option && option.page === 'write' && option.action === 'ok' && this.isArrayNotNull(option.data)) {
          this.setAddress(option.data, option.selector)
        }
      })
      return [netDiskSelector, addressSelector]
    }

    /**
     * 邮件地址提示
     * @param val
     */
    autoCompeteItem(val) {
      // 获取补全内容
      this.autoCompeteList = []
      if (val && val.trim().length >= 2) {
        val = val.toLowerCase()
        twCallBeanPromise('address.util.ac', {'keyword': val}).then((ret) => {
          if (this.isArrayNotNull(ret.beanparam.data.list)) {
            let tempArr = []
            this.each(ret.beanparam.data.list, (v, i) => {
              if (v.account) {
                let temp = {
                  id: v.account
                }
                if (v.nickname) {
                  temp.text = v.nickname + '<' + v.account + '>'
                } else {
                  temp.text = v.account
                }
                if (tempArr.length <= 10) {
                  tempArr.push(temp)
                }
              }
            })
            this.autoCompeteList = tempArr
            this.$apply()
          }
        })
      }
    }

    /**
     * 添加附件
     */
    addAttaches(files, from) {
      if (files && files.length > 0) {
        this.each(files, (file, index) => {
          if (file.id && !this.attachesMap[file.id]) {
            var o = {id: file.id}
            o.filename = file.name || ''
            o.filesize = parseInt((file.size || 0))
            o.formatSize = bytesToSize(o.filesize)
            var filetype = o.filename.substring(o.filename.lastIndexOf('.') + 1, o.filename.length)
            if (from === 'netDisk') {
              file.id.indexOf('_at_') !== -1 ? o.file = ['$$callbean$mail.client.getattach$', JSON.stringify({
                mailid: file.mailId || '',
                atid: file.id
              }), '$', filetype, '$$'].join('') : file.id.indexOf('_nf_') !== -1 ? o.file = ['$$callbean$netdisk.file.get$', JSON.stringify({nfid: file.id}), '$', filetype, '$$'].join('') : void(0)
              o.icon = getPhotoByFileType(filetype)
            } else if (from === 'upload') {
              o.file = ['$$temp$', file.id, '$', filetype, '$$', '&wid=', getWid()].join('')
              o.icon = file.icon || getPhotoByFileType(filetype)
            } else if (from === 'mailAttach') {
              o.file = file.resourceid
              o.icon = file.icon || getPhotoByFileType(filetype)
            }
            this.mail.attachs.push(o)
            this.attachesMap[file.id] = true
            this.$apply()
          }
        })
      }
    }

    /**
     * 添加地址
     */
    setAddress(data, type) {
      if (!type) {
        return
      }
      let component = this.$wxpage.selectComponent(`#${type}`)
      if (component && component.setTag) {
        if (this.isArrayNotNull(data)) {
          this.each(data, (ad, i) => {
            let id = ''
            let text = ''
            if (ad.type === 'address') {
              if (this.isArrayNotNull(ad.emails) && ad.emails[0].address) {
                id = ad.emails[0].address
                text = `${id}`
                if (ad.name) {
                  text = `${ad.name}<${id}>`
                }
              }
            } else if (ad.type === 'dir') {
              id = ad.id
              text = ad.name
            }
            component.setTag(id, text)
          })
        }
      }
    }

    /**
     * 邮件转发
     * @param type
     * @param data
     */
    forward(type, data) {
      if (type === 'sendMail' && data && data.address) {
        let fd = [{
          type: 'address',
          name: data.name,
          emails: [{address: data.address}]
        }]
        this.setAddress(fd, 'tos')
      } else if (type === 'forwardAttach' && data && this.isArrayNotNull(data.attaches)) {
        // data template {id:xxx,password:xxx}
        this.addAttaches(data.attaches, 'netDisk')
      } else if (type === 'mailForward' && data && data.id) {
        // data template {id:xxx,password:xxx}
        this.handleMailForward(data.id, data.password)
      } else if (type === 'mailReply' && data && data.id) {
        // data template {id:xxx,password:xxx}
        this.handleMailReply(data.id, data.password)
      } else if (type === 'mailAttachForward' && data) {
        // data template [{id:xxx,subject:xxx}]
        this.handleMailAttachForward(data)
      }
    }

    /**
     * 处理邮件转发
     * @param mailId
     * @param password
     */
    handleMailForward(mailId, password) {
      this.getMailById(mailId, password).then((mail) => {
        wepy.setNavigationBarTitle({title: '转发邮件'})
        let subject = 'Fwd:' + mail.subject || ''
        this.mail.subject = subject
        let mailSourceHtml = this.createMailSourceHtml(mail)
        let forwardMailContent = mailSourceHtml + mail.content
        this.forwardMailContent = forwardMailContent
        this.$apply()
      })
    }

    /**
     * 处理邮件回复
     * @param mailId
     * @param password
     */
    handleMailReply(mailId, password) {
      this.getMailById(mailId, password).then((mail) => {
        wepy.setNavigationBarTitle({title: '回复邮件'})
        let fd = []
        this.each(mail.tos, (to, i) => {
          if (to.address) {
            let temp = {
              type: 'address',
              name: to.name,
              emails: [{address: to.address}]
            }
            fd.push(temp)
          }
        })
        this.setAddress(fd, 'tos')
        let subject = 'Re:' + mail.subject || ''
        this.mail.subject = subject
        let mailSourceHtml = this.createMailSourceHtml(mail)
        let forwardMailContent = mailSourceHtml + mail.content
        this.forwardMailContent = forwardMailContent
        this.$apply()
      })
    }

    /**
     * 邮件附件转发处理
     * @param mailIds
     */
    handleMailAttachForward(data) {
      if (this.isArrayNotNull(data)) {
        wepy.setNavigationBarTitle({title: '转发邮件'})
        var subjects = []
        var files = []
        var uid = this.$parent.globalData.userInfo.uid
        this.each(data, (ml, i) => {
          let subject = 'Fwd:' + (!ml.subject ? '（没有主题）' : ml.subject)
          subjects.push(subject)
          let paramsCallbean = {'id': uid || '', 'mailid': ml.id}
          let resourceid = ['$$callbean$mail.store.getsource$', JSON.stringify(paramsCallbean).replace(/\"/g, '\''), '$eml$$'].join('')
          let filename = subject + '.eml'
          let file = {id: ml.id, resourceid: resourceid, name: filename}
          files.push(file)
        })
        this.addAttaches(files, 'mailAttach')
      }
    }

    /**
     * 生成原邮件信息 html
     * @param mail
     */
    createMailSourceHtml(mail) {
      if (mail) {
        // 处理收件人、抄送和密送
        let tos = mail.tos
        let ccs = mail.ccs
        let tosStr = ''
        if (tos && tos.length > 0) {
          for (let i = 0, len = tos.length; i < len; i++) {
            let to = tos[i]
            let temp = ''
            if (to) {
              if (to.address && to.address.indexOf('@') !== -1) {
                temp = `"${to.name || ''}"&lt;${to.address}&gt;`
              } else if (to.name) {
                temp = `"${to.name}"`
              }
            }

            tosStr += (i === len - 1) ? temp : temp + ','
          }
        }
        let ccsStr = ''
        if (ccs && ccs.length > 0) {
          for (let i = 0, len = ccs.length; i < len; i++) {
            let cc = ccs[i]
            let temp = ''
            if (cc) {
              if (cc.address && cc.address.indexOf('@') !== -1) {
                temp = `"${cc.name || ''}"&lt;${cc.address}&gt;`
              } else if (cc.name) {
                temp = `"${cc.name}"`
              }
            }
            ccsStr += (i === len - 1) ? temp : temp + ','
          }
        }
        let attaches = mail.attaches
        this.addAttaches(attaches, 'netDisk')
        let sendTime = mail.time
        // 生成原邮件信息
        let line = '<div><div style="font-size: 13px;padding:2px 0 2px 0;">------------------ 原邮件内容 ------------------</div></div>'
        let strFrom = `<div style="word-break: break-all;background:#efefef;padding: 3px 0;"><b>发件人：</b>"${mail.name}"&lt;${mail.address}&gt;<br></div>`
        let strTos = `<div style="word-break: break-all;background:#efefef;padding: 3px 0;"><b>收件人：</b>${tosStr}<br></div>`
        let strCcs = ccsStr ? `<div style="word-break: break-all;background:#efefef;padding: 3px 0;"><b>抄送：</b>${ccsStr}<br></div>` : ''
        let strSendtime = `<div style="word-break: break-all;background:#efefef;padding: 3px 0;"><b>发送时间：</b>${sendTime}<br></div>`
        let strSubject = `<div style="word-break: break-all;background:#efefef;padding: 3px 0;"><b>主题：</b>${mail.subject}<br></div>`
        let originMailMsg = `<div style="font-family: Microsoft Yahei,Tahoma,Arial;font-size: 13px;margin-tbcc: 5px;padding: 10px;background: #efefef;">${strFrom}${strTos}${strCcs}${strSendtime}${strSubject}</div>`
        return line + originMailMsg
      }
      return ''
    }
  }
</script>
