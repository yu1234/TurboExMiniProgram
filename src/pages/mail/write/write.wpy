<style lang="less">
  .from-item {
    padding: .5rem;
    border-bottom: 1px silver solid;
  }

  .attachPopup {
    height: 4.75rem;

    .tb-avatar {
      display: inline-flex;
      width: 3rem;
      height: 3rem;
      border-radius: 50%;
      background: rgb(245, 245, 245);;
      color: black;
    }
    .attach-item {
      flex: 1 1 auto;
    }
    .attaches {
      .item {
        margin-top: .5rem;
        background-color: rgb(238, 238, 238);
      }
    }
  }
</style>
<template>
  <tb-nav has-right>
    <view slot="right">
      <icon class="iconfont icon-nav_btn_send tb-nav-icon" @tap="sendMail"
            style="color: {{canSend ?'#49A9F2;':'#ccc;'}}"></icon>
    </view>
  </tb-nav>
  <view class="tb-content has-sub-header">
    <view class="from-item">
      <tb-input-tag sys-font-size="{{sysFontSize}}" title="{{inputTitle.title}}" name="tos" exist-tags="{{existTags}}"
                    bind:tagChange="tagChange" bind:onInput="inputTagChange"
                    auto-compete-list="{{autoCompeteList}}" bind:rightIconTap="selectAddress"></tb-input-tag>
    </view>
    <view class="from-item" wx:if="{{!showOtherInput}}" @tap="onShowOtherInput" style="min-height: 1.5rem">
      <text style="color: #49a9f2">抄送/密送</text>
    </view>
    <view class="from-item" wx:if="{{showOtherInput}}">
      <tb-input-tag sys-font-size="{{sysFontSize}}" title="{{inputTitle.title1}}" name="ccs"
                    bind:tagChange="tagChange" exist-tags="{{existTags}}" bind:onInput="inputTagChange"
                    auto-compete-list="{{autoCompeteList}}" bind:rightIconTap="selectAddress"></tb-input-tag>
    </view>
    <view class="from-item" wx:if="{{showOtherInput}}">
      <tb-input-tag sys-font-size="{{sysFontSize}}" title="{{inputTitle.title2}}" name="bccs"
                    bind:tagChange="tagChange" exist-tags="{{existTags}}" bind:onInput="inputTagChange"
                    auto-compete-list="{{autoCompeteList}}" bind:rightIconTap="selectAddress"></tb-input-tag>
    </view>
    <view class="from-item">
      <tb-input title="{{inputTitle.title3}}" model="{{mail.subject}}" name="mail.subject" bind:input="formChange"
                has-right>
        <view slot="right">
          <icon class="iconfont icon-compose_mail_btn_add" style="color: rgb(255, 195, 0);font-size: 1rem"
                @tap.stop="chooseUploadAttach"></icon>
        </view>
      </tb-input>
    </view>
    <view style="padding: 0 .5rem .2rem .5rem" class="attaches" wx:if="{{mail.attachs&&mail.attachs.length}}">
      <block wx:for="{{mail.attachs}}" wx:key="{{item.id}}">
        <tb-list-item item-class="item" title="{{item.name}}" text="{{item.formatSize}}" has-left has-right
                      @tap.stop="attachItemTap('item',{{item}})">
          <view style="height: 2.5rem" slot="left">
            <wxc-avatar class="tb-head-avatar" mold="square" src="{{item.icon}}">
            </wxc-avatar>
          </view>
          <view slot="right" style="padding-right: .5rem">
            <icon class="iconfont icon-nav_btn_next" style="font-size: 1.2rem"
                  @tap.stop="attachItemTap('icon',{{item}})"></icon>
          </view>
        </tb-list-item>
      </block>
    </view>
    <view class="from-item">
      <textarea style="width: 100%;" maxlength="{{-1}}" bindinput="mailContentChange"></textarea>
    </view>
  </view>
  <!--上传附件弹出层-->
  <tb-popup open="{{popup.attachPopupOpen}}" position="bottom" name="attachPopupOpen" bind:show="popupChange"
            bind:hide="popupChange">
    <view class="attachPopup">
      <wxc-flex main="center" cross="center">
        <view class="attach-item text-center" @tap="chooseImage">
          <wxc-avatar class="tb-avatar">
            <icon class="iconfont icon-add_attachment_icon_4" style="font-size: 1.8rem"></icon>
          </wxc-avatar>
          <view>
            <text>选择图片</text>
          </view>
        </view>
        <view class="attach-item text-center" @tap="chooseVideo">
          <wxc-avatar class="tb-avatar">
            <icon class="iconfont icon-aui-icon-video" style="font-size: 1.8rem"></icon>
          </wxc-avatar>
          <view>
            <text>选择视频</text>
          </view>
        </view>
        <view class=" attach-item  text-center" @tap="chooseFileByNetDisk">
          <wxc-avatar class="tb-avatar">
            <icon class="iconfont icon-function_icon_online" style="font-size: 1.8rem"></icon>
          </wxc-avatar>
          <view>
            <text>选择网盘</text>
          </view>
        </view>
      </wxc-flex>
    </view>
  </tb-popup>
</template>

<script>
  import wepy from 'wepy'
  import BaseMixin from '../../../mixins/base'
  import PopupMixin from '../../../mixins/popup'
  import FromMixin from '../../../mixins/form'
  import {sendMail, twCallBeanPromise, uploadFile} from '../../../utils/twmodule'

  export default class Write extends wepy.page {
    mixins = [BaseMixin, PopupMixin, FromMixin]
    config = {
      navigationBarTitleText: '写邮件',
      usingComponents: {
        'tb-nav': '../../../components/tbui/tb-nav/index',
        'tb-list-item': '../../../components/tbui/tb-list-item/index',
        'tb-input-tag': '../../../components/tbui/tb-input-tag/index',
        'tb-input': '../../../components/tbui/tb-input/index',
        'wxc-flex': '../../../components/minui/wxc-flex/index',
        'wxc-avatar': '../../../components/minui/wxc-avatar/index',
        'tb-popup': '../../../components/tbui/tb-popup/index'
      }
    }
    components = {}
    data = {
      canSend: false,
      autoCompeteList: [],
      existTags: [],
      inputTitle: {
        title: '收件人:',
        title1: '抄&emsp;送:',
        title2: '密&emsp;送:',
        title3: '主&emsp;题'
      },
      showOtherInput: false,
      popup: {
        attachPopupOpen: false
      },
      mail: {
        foldercode: 'send', // 保存在已发送
        from: null,
        tos: [],
        ccs: [],
        bccs: [],
        sendtime: null,
        neednotification: false,
        sendsingle: false,
        stationery: null,
        priority: null,
        importance: null,
        sec_class: null,
        subject: null,
        date: null,
        contents: [{
          'content-type': 'text/html',
          content: ''
        }],
        attachs: []
      }
    }
    computed = {}
    watch = {
      mail(newVal) {
        if (newVal) {
          if (this.isArrayNotNull(newVal.tos)) {
            this.canSend = true
            this.$apply()
          } else {
            this.canSend = false
          }
        } else {
          this.canSend = false
        }
      }
    }
    methods = {
      onShowOtherInput() {
        this.showOtherInput = true
      },
      chooseUploadAttach() {
        this.openPopup('attachPopupOpen')
      },
      chooseImage() {
        let self = this
        wepy.chooseImage({
          success(res) {
            console.log('chooseImage:', res)
            if (self.isArrayNotNull(res.tempFilePaths)) {
              let file = res.tempFiles[0]
              let formData = {size: file.size}
              uploadFile(res.tempFilePaths[0], formData)
            }
          },
          fail(res) {

          }
        })
      },
      chooseVideo() {
        wepy.chooseVideo({
          success(res) {
            console.log('chooseVideo:', res)
            if (this.isArrayNotNull(res.tempFilePaths)) {

            }
          },
          fail(res) {

          }
        })
      },
      chooseFileByNetDisk() {
        this.loadPage('/pages/netdisk/selector/selector?selector=uploadFile')
      },
      tagChange(e) {
        let name = e.detail.name
        let tags = e.detail.tags
        let addresses = []
        if (this.isArrayNotNull(tags)) {
          this.each(tags, (v, i) => {
            if (v && v.id) {
              addresses.push(v.id)
            }
          })
        }
        if (name === 'tos') {
          this.mail.tos = addresses
        } else if (name === 'ccs') {
          this.mail.ccs = addresses
        } else if (name === 'bccs') {
          this.mail.bccs = addresses
        }
        this.existTags = this.concat([], this.mail.tos, this.mail.ccs, this.mail.bccs)
      },
      mailContentChange(e) {
        let v = e.detail.value
        v = v.replace(/\n/g, '<br/>')
        this.mail.contents[0].content = `<div>${v}</div>`
      },
      sendMail() {
        if (!this.canSend) {
          wepy.showToast({
            title: '请填写收件人再发送',
            icon: 'none'
          })
          return
        }
        wepy.showLoading({
          title: '邮件发送中...'
        })
        let userInfo = this.$parent.globalData.userInfo
        let params = {sendAndSave: true, maxRcpts: userInfo.maxRcpts, sendMailMaxSize: userInfo.sendMailMaxSize}
        if (userInfo.address) {
          this.mail.from = userInfo.address
        }
        sendMail(this.mail, params).then((result) => {
          wepy.hideLoading()
          wepy.showToast({
            title: '邮件发送成功'
          })
        }).catch((e) => {
          wepy.hideLoading()
          wepy.showToast({
            title: e.message,
            icon: 'none'
          })
        })
      },
      inputTagChange(e) {
        let value = e.detail.value
        this.autoCompeteItem(value)
      },
      selectAddress(e) {
        let name = e.detail.name
        if (name) {
          this.loadPage(`/pages/address/selector/selector?selector=${name}`)
        }
      }
    }

    onShow() {
    }

    onLoad() {
    }

    /**
     * 邮件地址提示
     * @param val
     */
    autoCompeteItem(val) {
      // 获取补全内容
      this.autoCompeteList = []
      if (val && val.trim().length >= 2) {
        val = val.toLowerCase()
        twCallBeanPromise('address.util.ac', {'keyword': val}).then((ret) => {
          if (this.isArrayNotNull(ret.beanparam.data.list)) {
            let tempArr = []
            this.each(ret.beanparam.data.list, (v, i) => {
              if (v.account) {
                let temp = {
                  id: v.account
                }
                if (v.nickname) {
                  temp.text = v.nickname + '<' + v.account + '>'
                } else {
                  temp.text = v.account
                }
                if (tempArr.length <= 10) {
                  tempArr.push(temp)
                }
              }
            })
            this.autoCompeteList = tempArr
            this.$apply()
          }
        })
      }
    }
  }
</script>
