<style lang="less">
  .list {
    .item {
      .content {
        padding-left: .5rem;
        padding-right: .5rem;
        .left {

        }
        .right {

        }
        .avatar {
          display: block;
          width: 2.5rem;
          height: 2.5rem;
        }
      }
    }
  }

  .swipe-panel-right {
    width: 10rem;
    .item {
      height: 2.5rem;
      padding: .2rem;
      .icon {
        font-size: 1.2rem;
        display: flex;
      }
      &.active {
        background-color: rgb(238, 238, 238);
      }
      .folder-name {
        font-size: .75rem;
      }
    }
    .panel-gray-strip {
      width: 100%;
      height: .5rem;
      background-color: rgb(238, 238, 238);
    }
  }

  .markingPopupOpen {
    width: 14rem;
    min-height: 20rem;
    overflow: auto;
    .item {
      height: 2rem;
      padding: .2rem;
      .icon {
        font-size: 1rem;
        display: flex;
      }
      .name {
        font-size: .75rem;
      }
    }
  }


</style>
<template>
  <tb-nav has-right has-left>
    <view slot="left">
      <icon class="iconfont icon-nav_btn_cancel tb-nav-icon" wx:if="{{config.edit}}" @tap="exitEdit()"></icon>
    </view>
    <view slot="right">
      <icon class="iconfont icon-nav_btn_edit_default tb-nav-icon" @tap="writeMail"
            wx:if="{{!config.edit}}"></icon>
      <icon class="iconfont icon-nav_btn_cancel_check tb-nav-icon" wx:if="{{config.edit&&!isCheckAll}}"
            @tap="checkAllOrNot({{true}})"></icon>
      <icon class="iconfont icon-nav_btn_check_all tb-nav-icon" wx:if="{{config.edit&&isCheckAll}}"
            @tap="checkAllOrNot({{false}})"></icon>
    </view>
  </tb-nav>
  <view class="tb-content has-sub-header {{config.edit?'tb-has-bottom-tab':''}}" bindlongpress="longTap">
    <tb-mail-list-item avatar="{{item.headerPhoto}}" title="{{item.title}}" subTitle="{{item.subject}}"
                       text="{{item.text}}" titleAfter="{{item.date}}" un-read="{{item.unRead}}" top="{{item.top}}"
                       has-right="{{config.edit}}" attach="{{item.hasAttach}}" backlog="{{item.backlog}}"
                       importance="{{item.importance}}" star="{{item.star}}" wx:for="{{mails}}" wx:key="{{item.id}}"
                       @tap.stop="readNewMail({{item}},{{index}})">
      <tb-checkbox slot="right" value="{{item.id}}" name="selected" model="{{selected}}" color="#49A9F2"
                   bind:change="formChange"/>
    </tb-mail-list-item>
  </view>
  <!--底部工具栏-->
  <view class="tb-bar tb-bar-tab" wx:if="{{config.edit}}">
    <!--    <view class="tb-tab-item" @tap="tabBarTap('delete')">
          <icon class="iconfont icon-bottom_btn_delete tb-tab-icon"></icon>
        </view>-->
    <view class="tb-tab-item" @tap="openPopup('markingPopupOpen')">
      <icon class="iconfont icon-bottom_btn_marking tb-tab-icon"></icon>
    </view>
    <view class="tb-tab-item" @tap="openPopup('movePopupOpen')">
      <icon class="iconfont icon-bottom_btn_move tb-tab-icon"></icon>
    </view>
    <view class="tb-tab-item" @tap="tabBarTap('forward')">
      <icon class="iconfont icon-bottom_btn_forwardin tb-tab-icon" wx:if="{{selected.length<=1}}"></icon>
      <icon class="iconfont icon-bottom_btn_attachmen tb-tab-icon" wx:if="{{selected.length>1}}"></icon>
    </view>
  </view>
  <!--标记弹出层-->
  <tb-popup open="{{popup.markingPopupOpen}}" name="markingPopupOpen" bind:show="popupChange" bind:hide="popupChange">
    <view class="markingPopupOpen">
      <wxc-flex dir="top" main="center">
        <block wx:for="{{markingItems}}" wx:key="{{item.id}}">
          <view class="tb-flex-item item">
            <wxc-flex cross="center" bind:tap="onMarkingMail({{item}})">
              <view class="tb-flex-item" style="width: 20%">
                <icon class="iconfont {{item.icon}} icon"></icon>
              </view>
              <view class="tb-flex-item" style="flex-grow: 4;width: 80%">
                <wxc-elip class="name">{{item.name}}</wxc-elip>
              </view>
            </wxc-flex>
          </view>
        </block>
      </wxc-flex>
    </view>
  </tb-popup>
  <!--移动弹出层-->
  <tb-popup open="{{popup.movePopupOpen}}" name="movePopupOpen" bind:show="popupChange"
            bind:hide="popupChange">
    <view class="markingPopupOpen">
      <wxc-flex dir="top" main="center"
                class="{{movePopupFolder.currentFolderId&&movePopupFolder.currentFolderId!=='root'?'tb-has-bottom-tab':''}}">
        <block wx:for="{{movePopupFolder.currentFolders}}" wx:key="{{item.id}}">
          <view class="tb-flex-item item">
            <wxc-flex cross="center" bind:tap="moveMailTap({{selected}},{{item}})">
              <view class="tb-flex-item" style="width: 20%">
                <icon class="iconfont {{item.icon}} icon"></icon>
              </view>
              <view class="tb-flex-item" style="flex-grow: 4;width: {{item.hasChildNodes?'60%':'80%'}};">
                <wxc-elip class="name">{{item.name}}</wxc-elip>
              </view>
              <view class="tb-flex-item" style="width: 20%" wx:if="{{item.hasChildNodes}}"
                    @tap.stop="intoFolder('movePopupFolder',{{item.id}})">
                <icon class="iconfont icon-next-m icon" style="font-size: 1rem;color: #cccccc"></icon>
              </view>
            </wxc-flex>
          </view>
          <view class="tb-flex-item  tb-bar tb-bar-tab"
                wx:if="{{movePopupFolder.currentFolderId&&movePopupFolder.currentFolderId!=='root'}}">
            <wxc-flex dir="top" main="center" style="height: 2.5rem;">
              <view style="font-size: .75rem;color: #49A9F2;padding-left: .5rem" @tap="backFolder('movePopupFolder')">
                <icon class="iconfont icon-move_mail_icon_back"></icon>
                <view style="display: inline-block">上一级</view>
              </view>
            </wxc-flex>
          </view>
        </block>
      </wxc-flex>
    </view>
  </tb-popup>
  <!--邮件密码验证-->
  <tb-permit id="mailPermit"></tb-permit>
</template>

<script>
  import wepy from 'wepy'
  import {twCallBeanPromise} from '../../../utils/twmodule'
  import {parseDate, defaultErrors} from '../../../utils/utils'
  import BaseMixin from '../../../mixins/base'
  import PullDownRefreshMixin from '../../../mixins/pullDownRefresh'
  import MailOperatorMixin from '../../../mixins/mailOperator'
  import FormMixin from '../../../mixins/form'
  import PermitMixin from '../../../mixins/permit'

  const flags = [
    {id: 'star', name: '星标邮件', icon: 'icon-mailing_list_menu_ic1', color: 'rgb(255,162,0)', flag: '9'},
    {
      id: 'importance',
      name: '待办邮件',
      icon: 'icon-mailing_list_menu_ic1',
      color: 'rgb(0,170,255)',
      flag: '11'
    },
    {id: 'backlog', name: '重要邮件', icon: 'icon-mailing_list_menu_ic2', color: 'rgb(255,59,48)', flag: '14'}]
  export default class NewMailList extends wepy.page {
    mixins = [BaseMixin, PullDownRefreshMixin, MailOperatorMixin, FormMixin, PermitMixin]
    config = {
      navigationBarTitleText: '新邮件',
      usingComponents: {
        'wxc-flex': '../../../components/minui/wxc-flex/index',
        'wxc-elip': '../../../components/minui/wxc-elip/index',
        'tb-mail-list-item': '../../../components/tbui/tb-mail-list-item/index',
        'tb-nav': '../../../components/tbui/tb-nav/index',
        'tb-popup': '../../../components/tbui/tb-popup/index',
        'tb-checkbox': '../../../components/tbui/tb-checkbox/index',
        'tb-permit': '../../../components/tbui/tb-permit/index'
      },
      enablePullDownRefresh: true,
      backgroundTextStyle: `dark`
    }
    components = {}
    data = {
      userHeaderPhoto: null,
      userAddress: null,
      mails: [],
      mailMap: [],
      config: {
        edit: false,
      },
      flags: ['star', 'importance', 'backlog'],
      flagFolders: flags,
      selected: [],
      popup: {
        swipePanelOpen: false,
        markingPopupOpen: false,
        movePopupOpen: false
      }
    }
    computed = {
      isCheckAll() {
        if (this.selected.length >= this.mails.length) {
          return true
        } else {
          return false
        }
      }
    }
    watch = {}
    methods = {
      longTap() {
        this.config.edit = true
      },
      openPopup(name) {
        this.popup[name] = true
      },
      popupChange(e) {
        let name = e.detail.name
        let type = e.detail.type
        if (type === 'show') {
          if (this.popup[name] !== null && this.popup[name] !== undefined) {
            this.popup[name] = true
          }
        } else if (type === 'hide') {
          if (this.popup[name] !== null && this.popup[name] !== undefined) {
            this.popup[name] = false
          }
        }
      },
      changeTab(item) {
        if (item && item.id) {
          if (item.id === 'custom') {
            if (item.hasChildNodes) {
              this.intoFolder('swipePanelFolder', item.id)
              this.config.currentTab = item.id
            }
          } else {
            wepy.setNavigationBarTitle({title: item.name})
            this.config.currentTab = item.id
            this.refresh()
            this.popup.swipePanelOpen = false
          }
        }
      },
      exitEdit() {
        this.config.edit = false
        this.selected = []
      },
      checkAllOrNot(isCheckAll) {
        if (isCheckAll) {
          this.each(this.mails, (v, i) => {
            if (v.id) {
              this.selected.push(v.id)
            }
          })
        } else {
          this.selected = []
        }
      },
      tabBarTap(type) {
        if (type === 'delete') {
          this.logicDeleteMail(this.selected).then(() => {
            wepy.hideLoading()
            this.selected = []
            this.refresh()
          })
        } else if (type === 'forward') {
          if (!this.isArrayNotNull(this.selected)) {
            let tip = '请选择需转发的邮件'
            wepy.showToast({title: tip, icon: 'none'})
            return
          }
          if (this.selected && this.selected.length > 1) {
            let data = []
            this.each(this.selected, (s, i) => {
              let ml = this.mailMap[s]
              if (ml) {
                let temp = {
                  id: ml.id,
                  subject: ml.subject
                }
                data.push(temp)
              }
            })
            this.loadPage(`/pages/mail/write/write?type=mailAttachForward&data=${JSON.stringify(data)}`)
          } else {
            this.mailForward(this.selected[0])
          }
        }
      },
      onMarkingMail(item) {
        this.markingMail(this.selected, item).then(() => {
          this.selected = []
          this.refresh()
          this.popup.markingPopupOpen = false
        })
      },
      moveMailTap(ids, item) {
        this.moveMailTap(ids, item).then(() => {
          this.selected = []
          this.refresh()
          this.popup.movePopupOpen = false
        })
      },
      writeMail() {
        this.loadPage(`/pages/mail/write/write`)
      },
      readNewMail(mail, index) {
        if (mail && mail.id) {
          wepy.showLoading({title: '加载中'})
          let mailPermit = this.$wxpage.selectComponent('#mailPermit')
          this.checkPreMit('mail.client.get', {mailid: mail.id}, mailPermit).then((r) => {
            if (mail.unRead) {
              this.markingMailByFlags([mail.id], ['1'], ['0']).then(() => {
                if (this.isArrayNotNull(this.mails) && index > -1 && this.mails.length > index) {
                  if (this.mails[index] && this.mails[index].id === mail.id) {
                    this.mails[index].unRead = false
                    this.$apply()
                  }
                }
              })
            }
            this.deleteNotice([mail.id]).then(() => {
              wepy.hideLoading()
              let password = r.password
              this.loadPage(`/pages/mail/read/read?id=${mail.id}&password=${password}`)
            })
          }).catch((e) => {
            wepy.hideLoading()
            wepy.showToast({
              title: e.message,
              icon: 'none'
            })
          })
        }
      }
    }

    onShow() {
      this.refresh()
    }

    onUnload(e) {

    }

    onLoad() {
      let self = this
      if (self.$parent.globalData.userInfo) {
        self.userHeaderPhoto = self.$parent.globalData.userInfo.headPhoto
        self.userAddress = self.$parent.globalData.userInfo.address
      }
      self.refresh()
    }

    /**
     * 刷新
     */
    refresh() {
      wepy.showLoading({title: '加载中...'})
      let self = this
      return new Promise((resolve, reject) => {
        // 获取消息提醒邮件
        self.getNoticeMailList().then((mails) => {
          self.refreshComplete(mails)
          wepy.hideLoading()
          resolve()
        }).catch((e) => {
          wepy.showToast({title: e.message, icon: 'none'})
          wepy.hideLoading()
          reject(e)
        })
      })
    }

    refreshComplete(mails) {
      let self = this
      self.mails = self.concat([], mails)
      self._refreshComplete()
      self.$apply()
    }

    /**
     * 获取邮件通知列表
     */
    getNoticeMailList() {
      return new Promise((resolve, reject) => {
        twCallBeanPromise('notice.getlist', {}).then((ret) => {
          let list = ret.beanparam.data.list
          if (this.isArrayNotNull(list)) {
            let call = []
            let noticeIds = []
            this.each(list, function (notice, i) {
              if (notice && notice.rels && notice.rels.length > 0) {
                let type = notice.rels[0].idtype
                let mailId = notice.rels[0].reid
                let noticeId = notice.noticeid
                // 邮件通知
                if (type === 'ml' && mailId && noticeId) {
                  call.push(twCallBeanPromise('mail.client.get', {mailid: mailId}))
                  noticeIds.push(noticeId)
                }
              }
            })
            if (call.length > 0) {
              Promise.all(call).then((rets) => {
                let mails = []
                if (rets && rets.length > 0) {
                  this.each(rets, function (r, i) {
                    if (r.beanparam.retcode === 0) {
                      let bean = r.beanparam
                      if (bean.data && bean.data.mailid) {
                        if (noticeIds.length > i) {
                          bean.data.noticeId = noticeIds[i]
                        }
                        mails.push(bean.data)
                      }
                    }
                  })
                  if (mails.length > 0) {
                    console.log(mails)
                    this.formatMails(mails).then(r => {
                      resolve(r)
                    })
                  } else {
                    reject(defaultErrors.customError('列表为空'))
                  }
                } else {
                  reject(defaultErrors.customError('列表为空'))
                }
              }).catch(function (reason) {
                reject(defaultErrors.networkError)
              })
            } else {
              reject(defaultErrors.customError('列表为空'))
            }
          } else {
            reject(defaultErrors.customError('列表为空'))
          }
        }).catch(function (e) {
          reject(defaultErrors.networkError)
        })
      })
    }

    /**
     * 邮件对象数据格式化
     * @param mails
     * @returns {Array}
     */
    formatMails(mails) {
      return new Promise(resolve => {
        let mls = []
        let accounts = []
        if (this.isArrayNotNull(mails)) {
          for (let i = 0, len = mails.length; i < len; i++) {
            let mail = mails[i]
            if (mail.mailid) {
              let from = mail.from || {}
              let flags = mail.flags
              let unRead = false
              let hasAttach = false
              let star = false
              let importance = false
              let backlog = false
              let top = false
              if (this.isArrayNotNull(flags)) {
                for (let i = 0, len = flags.length; i < len; i++) {
                  let flag = flags[i]
                  if (flag === '0') {
                    unRead = true
                  }
                  if (flag === '12') {
                    hasAttach = true
                  }
                  if (flag === '9') {
                    star = true
                  }
                  if (flag === '15') {
                    importance = true
                  }
                  if (flag === '11') {
                    backlog = true
                  }
                  if (flag === '10') {
                    top = true
                  }
                }
              }
              let ml = {
                id: mail.mailid,
                address: from.account || '',
                title: from.name || (from.account || '暂无主题'),
                subject: mail.subject,
                fromId: mail.fromid,
                text: mail.txtcontent || '',
                date: parseDate(mail.rcpttime),
                unRead: unRead,
                hasAttach: hasAttach,
                star: star,
                importance: importance,
                backlog: backlog,
                top: top,
                noticeId: mail.noticeId
              }
              mls.push(ml)
              this.mailMap[ml.id] = ml
              accounts.push(ml.address)
            }
          }
        }
        if (this.isArrayNotNull(accounts)) {
          this.getSysUserInfo(accounts).then(map => {
            this.each(mls, (ml, i) => {
              if (map[ml.address] && map[ml.address].headerPhoto) {
                mls[i].headerPhoto = map[ml.address].headerPhoto
              } else {
                mls[i].headerPhoto = this.defaultHeaderPhoto
              }
            })
            resolve(mls)
          })
        } else {
          resolve(mls)
        }
      })
    }

    /**
     * 删除通知
     */
    deleteNotice(mailIds) {
      let noticeIds = []
      if (this.isArrayNotNull(mailIds)) {
        this.each(mailIds, (mailId, i) => {
          if (this.mailMap[mailId] && this.mailMap[mailId].noticeId) {
            noticeIds.push(this.mailMap[mailId].noticeId)
          }
        })
      }
      return new Promise(function (resolve) {
        if (noticeIds.length > 0) {
          twCallBeanPromise('notice.del', {noticeids: noticeIds}).then(function () {
            resolve()
          }).catch(function () {
            resolve()
          })
        } else {
          resolve()
        }
      })
    }
  }
</script>
